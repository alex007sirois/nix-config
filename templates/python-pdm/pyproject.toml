[project]
name = ""
description = ""
authors = []
dependencies = []
readme = "README.md"
requires-python = ">=3.12"
dynamic = ["version"]

[project.urls]
repository = ""

[build-system]
build-backend = "pdm.backend"
requires = ["pdm-backend"]

[tool.pdm]
version = { source = "scm" }

[tool.pdm.dev-dependencies]
test = [
  "pytest",
  "pytest-cov",
  "pytest-xdist",
  "pytest-randomly",
  "pytest-freezegun",
]
type-check = ["mypy"]
lint = ["ruff"]

[tool.pdm.scripts]
lint = "ruff check src tests"
type-check = "mypy src"
check-markers = "pytest --collect-only --strict-markers tests"
test = """
  pytest \
    -rfE \
    -n auto \
    --cov PACKAGE_NAME \
    --cov-report term \
    --cov-report xml:test-reports/coverage.xml \
    --cov-report lcov:test-reports/lcov.info \
    --cov-report html:test-reports/coverage/ \
    --junitxml test-reports/coverage-junit.xml \
    tests/units
"""
validate = { composite = ["lint", "type-check", "check-markers", "test"] }

[tool.ruff]
target-version = "py312"
line-length = 110
src = ["src", "tests"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # No typing needed for `self` and `cls`
  "ANN1",
  # No required documentation
  "D1",
  # Allow naive datetime
  "DTZ",
  # Allow fstring for error messages
  "EM",
  # Allow boolean positional args
  "FBT",
  # Allow TODO and FIXME
  "FIX",
  # Allow f-string
  "G004",
  # Pandas not used
  "PD",
  # Allow try-except blocks in loop
  "PERF203",
  # Allow magic numbers
  "PLR2004",
  # Allow not moving standard library import {} into a type-checking block	
  "TCH",
  # Allow TODO without author and ticket number
  "TD002",
  "TD003",
  # Allow long exception message
  "TRY003",
]

[tool.ruff.lint.per-file-ignores]
"src/*" = [
  # pytest not used in src
  "PT",
]
"tests/*" = [
  # Allow long lines
  "E501",
  # Disable security checks for tests
  "S",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.coverage.run]
branch = true

[tool.coverage.paths]
source = ["src/", "*/site-packages/"]

[tool.coverage.report]
fail_under = 100
skip_covered = true
skip_empty = true
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "raise AssertionError",
  "raise NotImplementedError",
  "if False:",
  "^\\s*\\.{3}$",
  "^\\s*assert isinstance.*$",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "@overload",
  "def __str__",
  "def __repr__",
]

[tool.pytest.ini_options]
addopts = ["-vv"]
markers = []

[tool.mypy]
check_untyped_defs = true
namespace_packages = true
pretty = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

